name: Docker Build and Push

on:
  push:
    branches:
      - main
    paths:
      - "ecowitt-proxy/**"
      - ".github/workflows/builder.yaml"
  pull_request:
    branches:
      - main
    paths:
      - "ecowitt-proxy/**"
      - ".github/workflows/builder.yaml"
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Explicitly use a builder that supports multi-platform builds
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/ecowitt-proxy
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push a single multi-arch image in one step
      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: ./ecowitt-proxy
          file: ./ecowitt-proxy/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
